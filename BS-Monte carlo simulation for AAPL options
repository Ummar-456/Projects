import numpy as np
import yfinance as yf

class OptionPricing:
    
    def __init__(self, ticker, E, T, rf, iterations):
        self.S0 = self.fetch_latest_price(ticker)
        self.E = E
        self.T = T
        self.rf = rf
        self.sigma = self.compute_historical_volatility(ticker)     
        self.iterations = iterations

    def fetch_latest_price(self, ticker):
        stock = yf.Ticker(ticker)
        latest_price = stock.history(period="1d")['Close'][0]
        return latest_price

    def compute_historical_volatility(self, ticker):
        stock = yf.Ticker(ticker)
        hist = stock.history(period="1y")
        daily_returns = hist['Close'].pct_change().dropna()
        volatility = daily_returns.std() * np.sqrt(252)  # Annualize the daily standard deviation
        return volatility
 
    def call_option_simulation(self):
        option_data = np.zeros([self.iterations, 2])
        rand = np.random.normal(0, 1, [1, self.iterations])
        stock_price = self.S0 * np.exp(self.T * (self.rf - 0.5 * self.sigma**2) + self.sigma * np.sqrt(self.T) * rand)
        option_data[:,1] = stock_price - self.E
        average = np.sum(np.amax(option_data, axis=1)) / float(self.iterations)
        return np.exp(-1.0 * self.rf * self.T) * average
		
    def put_option_simulation(self):
        option_data = np.zeros([self.iterations, 2])
        rand = np.random.normal(0, 1, [1, self.iterations])
        stock_price = self.S0 * np.exp(self.T * (self.rf - 0.5 * self.sigma**2) + self.sigma * np.sqrt(self.T) * rand)
        option_data[:,1] = self.E - stock_price
        average = np.sum(np.amax(option_data, axis=1)) / float(self.iterations)
        return np.exp(-1.0 * self.rf * self.T) * average

if __name__ == "__main__":
    ticker = "AAPL"
    E = 150  # Example strike price
    T = 1
    rf = 0.05
    iterations = 1000000

    model = OptionPricing(ticker, E, T, rf, iterations)
    print(f"Latest price for {ticker}: ", model.S0)
    print("Historical Volatility for {}: ".format(ticker), model.sigma)
    print("Call option price with Monte-Carlo approach: ", model.call_option_simulation()) 
    print("Put option price with Monte-Carlo approach: ", model.put_option_simulation())
