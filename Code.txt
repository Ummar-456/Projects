# Importing necessary libraries
import numpy as np 
import pandas as pd 
import seaborn as sns 
import matplotlib.pyplot as plt 
from prophet import Prophet

# Data Loading
# Loading the Chicago crimes data from 2005 to 2007
df_1 = pd.read_csv('Chicago_Crimes_2005_to_2007.csv', error_bad_lines = False)
# Loading the Chicago crimes data from 2008 to 2011
df_2 = pd.read_csv('Chicago_crimes_2008_to_2011.csv', error_bad_lines = False)
# Loading the Chicago crimes data from 2012 to 2017
df_3 = pd.read_csv('Chicago_crimes_2012_to_2017.csv', error_bad_lines = False)
df_1.shape
df_2.shape
df_3.shape

# Data Concatenation
# Concatenating all the datasets into one for a complete analysis
chicago_df = pd.concat([df_1,df_2,df_3])
chicago_df.shape

# Data Exploration
# Checking the first few rows of the dataset
chicago_df.head()
# Checking the last few rows of the dataset
chicago_df.tail(10)
# Identifying the missing data points using a heatmap
plt.figure(figsize = (10,10))
sns.heatmap(chicago_df.isnull(), cbar = False, cmap = 'YlGnBu')

# Data Pre-processing
# Dropping irrelevant columns
chicago_df.drop(['Unnamed: 0', 'Case Number', 'ID', 'IUCR','X Coordinate', 'Y Coordinate', 'Updated On', 'Year', 'FBI Code', 'Beat', 'Ward', 'Community Area', 'Location','District','Latitude','Longitude'], inplace = True , axis =1)
# Converting 'Date' to datetime format
chicago_df.Date = pd.to_datetime(chicago_df.Date, format = '%m/%d/%Y %I:%M:%S %p')
# Setting 'Date' as the index
chicago_df.index = pd.DatetimeIndex(chicago_df.Date)

# Exploratory Data Analysis
# Count of each type of crime
chicago_df['Primary Type'].value_counts()
# Top 15 types of crimes
chicago_df['Primary Type'].value_counts().iloc[:15]
# Visualizing the top 15 types of crimes
plt.figure(figsize = (15,10))
sns.countplot (y = 'Primary Type', data = chicago_df, order = order_data)
# Visualizing the top 15 location of crimes
plt.figure(figsize= (15,10))
sns.countplot(y = 'Location Description', data = chicago_df, order = chicago_df['Location Description'].value_counts().iloc[:15].index)

# Time Series Analysis
# Visualizing the number of crimes per year
plt.plot(chicago_df.resample('Y').size())
plt.title('Crime Count per Year')
plt.xlabel('Years')
plt.ylabel('Number of crimes')
# Visualizing the number of crimes per month
plt.plot(chicago_df.resample('M').size())
plt.title('Crime Count per Month')
plt.xlabel('Month')
plt.ylabel('Number of crimes')
# Visualizing the number of crimes per day
plt.plot(chicago_df.resample('D').size())
plt.title('Crime Count per Day')
plt.xlabel('Day')
plt.ylabel('Number of crimes')
# Visualizing the number of crimes per quarter
plt.plot(chicago_df.resample('Q').size())
plt.title('Crime Count per Quarter')
plt.xlabel('Quarter')
plt.ylabel('Number of crimes')

# Data Preparation for Forecasting
# Resampling the data on monthly level
chicago_prophet = chicago_df.resample('M').size().reset_index()
# Renaming the columns
chicago_prophet.columns = ['Date','Crime Count']
# Renaming columns for Prophet compatibility
chicago_prophet_df_final = chicago_prophet.rename(columns = {'Date': 'ds', 'Crime Count': 'y'})

# Model Fitting and Forecasting
# Instantiating Prophet model
m = Prophet()
# Fitting the model on the data
m.fit(chicago_prophet_df_final)
# Making future predictions for 720 periods (days)
future = m.make_future_dataframe(periods = 720)
forecast = m.predict(future)
# Visualizing the forecast
figure = m.plot(forecast, xlabel = 'Date', ylabel = 'Crime Rate')
# Plotting forecast components
figure = m.plot_components(forecast)
